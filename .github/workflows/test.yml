name: Build OpenList .ipk (OpenWrt)

on:
  workflow_dispatch:
    inputs:
      openwrt_ref:
        description: 'OpenWrt branch or tag to use (e.g. openwrt-23.05). If empty, will try openwrt-23.05 then fallback to master.'
        required: false
        default: 'openwrt-23.05'
      go_version:
        description: 'Go version to install (e.g. 1.24 or 1.24.x)'
        required: false
        default: '1.24'
      timeout_minutes:
        description: 'Job timeout in minutes'
        required: false
        default: '240'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ github.event.inputs.timeout_minutes }}
    env:
      OPENWRT_REPO: 'https://github.com/openwrt/openwrt.git'
      OPENWRT_DIR: './openwrt'
      PACKAGE_SRC_DIR: './openlist-src'
      GO_FALLBACK_REPO: 'https://github.com/sbwml/packages_lang_golang'
    steps:

    - name: Checkout OpenList (this repo) into separated folder
      uses: actions/checkout@v4
      with:
        path: openlist-src
        fetch-depth: 1

    - name: Install system packages (no python3-distutils)
      run: |
        sudo apt-get update -y
        sudo apt-get install -y --no-install-recommends \
          build-essential libncurses5-dev gawk gettext libssl-dev xsltproc \
          wget unzip python3 python3-setuptools python3-dev subversion \
          libfuse-dev swig rsync bc file flex bison ca-certificates git

    - name: Setup Go (required by some packages; default 1.24)
      uses: actions/setup-go@v4
      with:
        go-version: ${{ github.event.inputs.go_version }}

    - name: Clone OpenWrt (try user ref, fallback to default)
      run: |
        set -euo pipefail
        REF="${{ github.event.inputs.openwrt_ref }}"
        if [ -z "$REF" ] || [ "$REF" = "null" ]; then
          REF="openwrt-23.05"
        fi
        echo "Cloning OpenWrt ref: $REF"
        # try clone with requested ref, fallback to master if branch/tag not found
        if ! git clone --depth 1 --branch "$REF" "${{ env.OPENWRT_REPO }}" "${{ env.OPENWRT_DIR }}"; then
          echo "Requested ref '$REF' failed — falling back to shallow master clone"
          rm -rf "${{ env.OPENWRT_DIR }}" || true
          git clone --depth 1 "${{ env.OPENWRT_REPO }}" "${{ env.OPENWRT_DIR }}"
        fi
        ls -la "${{ env.OPENWRT_DIR }}" || true

    - name: Prepare feeds & (try) replace golang feed for Go >=1.24
      working-directory: ${{ env.OPENWRT_DIR }}
      run: |
        set -euo pipefail
        # ensure clean state
        rm -rf feeds/packages/lang/golang || true

        # try to clone sbwml/packages_lang_golang 24.x first, if that fails try 25.x
        if git clone --depth 1 "${{ env.GO_FALLBACK_REPO }}" -b 24.x feeds/packages/lang/golang 2>/dev/null; then
          echo "Cloned packages_lang_golang (24.x)"
        elif git clone --depth 1 "${{ env.GO_FALLBACK_REPO }}" -b 25.x feeds/packages/lang/golang 2>/dev/null; then
          echo "Cloned packages_lang_golang (25.x)"
        else
          echo "Warning: could not clone packages_lang_golang 24.x/25.x — continuing without replacing golang feed"
        fi

        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Copy OpenList package into OpenWrt tree
      working-directory: ${{ env.OPENWRT_DIR }}
      run: |
        set -euo pipefail
        # ensure target package dir
        rm -rf package/openlist || true
        mkdir -p package/openlist
        # copy everything from checked-out repo (openlist-src) into package/openlist
        cp -a ../openlist-src/* package/openlist/
        echo "Contents of package/openlist:"
        ls -la package/openlist || true

    - name: (Optional) show package Makefile location for debug
      working-directory: ${{ env.OPENWRT_DIR }}
      run: |
        echo "Listing potential package dirs (package/openlist/*):"
        ls -la package/openlist || true
        echo "Check for luci-app-openlist Makefile(s):"
        find package/openlist -maxdepth 3 -type f -name 'Makefile' -print || true

    - name: Build luci-app-openlist package
      working-directory: ${{ env.OPENWRT_DIR }}
      run: |
        set -euo pipefail
        # Use the package path that README expects: package/openlist/luci-app-openlist
        # If the repo layout is different, try the generic package/openlist/ compile target.
        JOBS=$(nproc || true)
        if make package/openlist/luci-app-openlist/compile -j${JOBS} V=s; then
          echo "Built package/openlist/luci-app-openlist"
        else
          echo "Try fallback: package/openlist/compile"
          make package/openlist/compile -j${JOBS} V=s
        fi

    - name: Collect generated .ipk artifacts
      working-directory: ${{ env.OPENWRT_DIR }}
      run: |
        set -euo pipefail
        OUTDIR="/tmp/openlist-ipks"
        mkdir -p "${OUTDIR}"
        # common bin locations
        find ./bin -type f -name 'luci-app-openlist*.ipk' -exec cp {} "${OUTDIR}/" \; || true
        # general search
        find . -type f -name 'luci-app-openlist*.ipk' -maxdepth 8 -exec cp {} "${OUTDIR}/" \; || true
        echo "Collected files:"
        ls -la "${OUTDIR}" || true

    - name: Upload IPK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openlist-ipks
        path: /tmp/openlist-ipks
