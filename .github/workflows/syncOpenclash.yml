name: Get OpenClash Latest Release Assets

on:
  # 手动触发
  workflow_dispatch:
  # 定时触发 - 每天检查一次
  schedule:
    - cron: '0 8 * * *'  # 每天早上8点UTC时间运行

jobs:
  get-latest-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        # 确保jq已安装
        sudo apt-get update
        sudo apt-get install -y jq curl
      
    - name: Get latest OpenClash release
      id: get_release
      run: |
        # 使用GitHub API获取最新的release信息（OpenClash只有pre-release版本）
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/vernesong/OpenClash/releases" | jq '.[0]')
        
        # 检查API响应是否有效
        if [ "$LATEST_RELEASE" = "null" ] || [ -z "$LATEST_RELEASE" ]; then
          echo "Error: Failed to get release information"
          exit 1
        fi
        
        # 提取release信息
        TAG_NAME=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
        RELEASE_NAME=$(echo "$LATEST_RELEASE" | jq -r '.name')
        PUBLISHED_AT=$(echo "$LATEST_RELEASE" | jq -r '.published_at')
        
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "published_at=$PUBLISHED_AT" >> $GITHUB_OUTPUT
        
        echo "Latest Release: $RELEASE_NAME ($TAG_NAME)"
        echo "Published at: $PUBLISHED_AT"
        
    - name: Download release assets
      run: |
        # 获取assets信息（使用第一个release而不是latest）
        RELEASE_DATA=$(curl -s "https://api.github.com/repos/vernesong/OpenClash/releases" | jq '.[0]')
        
        # 检查是否有assets
        ASSETS_COUNT=$(echo "$RELEASE_DATA" | jq '.assets | length')
        if [ "$ASSETS_COUNT" -eq 0 ]; then
          echo "No assets found in the latest release"
          exit 1
        fi
        
        echo "Found $ASSETS_COUNT assets to download"
        
        # 创建下载目录（使用最短路径避免Windows路径长度限制）
        mkdir -p assets
        cd assets
        
        # 初始化下载统计
        DOWNLOAD_SUCCESS=0
        DOWNLOAD_FAILED=0
        
        # 下载所有assets文件
        echo "$RELEASE_DATA" | \
        jq -r '.assets[] | "\(.name) \(.browser_download_url)"' | \
        while read name url; do
          echo "Downloading: $name"
          if curl -L -o "$name" "$url"; then
            if [ -f "$name" ] && [ -s "$name" ]; then
              echo "✓ Downloaded: $name ($(ls -lh "$name" | awk '{print $5}'))"
              DOWNLOAD_SUCCESS=$((DOWNLOAD_SUCCESS + 1))
            else
              echo "✗ Failed to download: $name (file is empty or missing)"
              DOWNLOAD_FAILED=$((DOWNLOAD_FAILED + 1))
            fi
          else
            echo "✗ Failed to download: $name (curl error)"
            DOWNLOAD_FAILED=$((DOWNLOAD_FAILED + 1))
          fi
        done
        
        # 显示下载的文件列表
        echo "Downloaded files:"
        ls -la
        
        # 检查下载结果
        TOTAL_FILES=$(ls -1 | grep -v DOWNLOAD_SUMMARY.md | wc -l)
        echo "Download Summary: $TOTAL_FILES files downloaded"
        
        if [ "$TOTAL_FILES" -eq 0 ]; then
          echo "Error: No files were successfully downloaded"
          exit 1
        fi
        
    - name: Create release summary
      run: |
        # 创建下载摘要文件
        SUMMARY_FILE="assets/DOWNLOAD_SUMMARY.md"
        
        cat > "$SUMMARY_FILE" << EOF
        # OpenClash Release Download Summary
        
        **Release:** ${{ steps.get_release.outputs.release_name }}
        **Tag:** ${{ steps.get_release.outputs.tag_name }}
        **Published:** ${{ steps.get_release.outputs.published_at }}
        **Download Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## Downloaded Assets:
        EOF
        
        cd assets
        for file in *; do
          if [ "$file" != "DOWNLOAD_SUMMARY.md" ]; then
            SIZE=$(ls -lh "$file" | awk '{print $5}')
            echo "- \`$file\` ($SIZE)" >> DOWNLOAD_SUMMARY.md
          fi
        done
        
        echo "" >> DOWNLOAD_SUMMARY.md
        echo "**Total Files:** $(ls -1 | grep -v DOWNLOAD_SUMMARY.md | wc -l)" >> DOWNLOAD_SUMMARY.md
        
        # 显示摘要
        cat DOWNLOAD_SUMMARY.md
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openclash-release-${{ steps.get_release.outputs.tag_name }}
        path: assets/
        retention-days: 30
        
    - name: Commit and push changes
      run: |
        # 配置git用户信息
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 检查是否有新文件或更改
        echo "Checking for changes in the repository..."
        git status --porcelain
        
        if [ -n "$(git status --porcelain)" ]; then
          echo "Changes detected, committing files..."
          
          # 添加所有更改的文件
          git add assets/
          
          # 显示将要提交的文件
          echo "Files to be committed:"
          git diff --cached --name-only
          
          # 提交更改
          COMMIT_MSG="Auto-update OpenClash assets to ${{ steps.get_release.outputs.tag_name }} - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "Committing with message: $COMMIT_MSG"
          git commit -m "$COMMIT_MSG"
          
          # 推送到仓库
          echo "Pushing changes to repository..."
          if git push; then
            echo "✓ Successfully committed and pushed OpenClash assets"
          else
            echo "✗ Failed to push changes to repository"
            exit 1
          fi
        else
          echo "No changes to commit"
        fi
        
    - name: Check for new release (optional notification)
      run: |
        # 这里可以添加通知逻辑，比如发送到Slack、Discord等
        echo "Release check completed for OpenClash ${{ steps.get_release.outputs.tag_name }}"
        echo "Files have been committed to the repository in assets/ directory"
