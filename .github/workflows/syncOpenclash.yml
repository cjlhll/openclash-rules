name: Mirror OpenClash Release to Repository

on:
  # ÊâãÂä®Ëß¶Âèë
  workflow_dispatch:
  # ÂÆöÊó∂Ëß¶Âèë - ÊØèÂ§©Ê£ÄÊü•‰∏ÄÊ¨°
  schedule:
    - cron: '0 8 * * *'  # ÊØèÂ§©Êó©‰∏ä8ÁÇπUTCÊó∂Èó¥ËøêË°å

jobs:
  mirror-openclash-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # ÈúÄË¶ÅÂÜôÊùÉÈôêÊù•ÂàõÂª∫release
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        # Á°Æ‰øùjqÂ∑≤ÂÆâË£Ö
        sudo apt-get update
        sudo apt-get install -y jq curl
      
    - name: Get latest OpenClash release
      id: get_release
      run: |
        # ‰ΩøÁî®GitHub APIËé∑ÂèñÊúÄÊñ∞ÁöÑrelease‰ø°ÊÅØÔºàOpenClashÂè™Êúâpre-releaseÁâàÊú¨Ôºâ
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/vernesong/OpenClash/releases" | jq '.[0]')
        
        # Ê£ÄÊü•APIÂìçÂ∫îÊòØÂê¶ÊúâÊïà
        if [ "$LATEST_RELEASE" = "null" ] || [ -z "$LATEST_RELEASE" ]; then
          echo "Error: Failed to get release information"
          exit 1
        fi
        
        # ÊèêÂèñrelease‰ø°ÊÅØ
        TAG_NAME=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
        RELEASE_NAME=$(echo "$LATEST_RELEASE" | jq -r '.name')
        PUBLISHED_AT=$(echo "$LATEST_RELEASE" | jq -r '.published_at')
        
        # Â§ÑÁêÜrelease bodyÔºåËΩ¨‰πâÁâπÊÆäÂ≠óÁ¨¶ÂíåÊç¢Ë°åÁ¨¶
        RELEASE_BODY_RAW=$(echo "$LATEST_RELEASE" | jq -r '.body')
        # ‰ΩøÁî®base64ÁºñÁ†ÅÊù•ÂÆâÂÖ®‰º†ÈÄíÂåÖÂê´ÁâπÊÆäÂ≠óÁ¨¶ÁöÑÂÜÖÂÆπ
        RELEASE_BODY_ENCODED=$(echo "$RELEASE_BODY_RAW" | base64 -w 0)
        
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "published_at=$PUBLISHED_AT" >> $GITHUB_OUTPUT
        echo "release_body_encoded=$RELEASE_BODY_ENCODED" >> $GITHUB_OUTPUT
        
        echo "Latest Release: $RELEASE_NAME ($TAG_NAME)"
        echo "Published at: $PUBLISHED_AT"
        echo "Body length: ${#RELEASE_BODY_RAW} characters"
        
    - name: Check if release already exists
      id: check_release
      run: |
        # Ê£ÄÊü•ÂΩìÂâç‰ªìÂ∫ìÊòØÂê¶Â∑≤ÁªèÊúâÁõ∏ÂêåtagÁöÑrelease
        EXISTING_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get_release.outputs.tag_name }}" | jq -r '.tag_name')
        
        if [ "$EXISTING_RELEASE" = "${{ steps.get_release.outputs.tag_name }}" ]; then
          echo "Release ${{ steps.get_release.outputs.tag_name }} already exists in this repository"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Release ${{ steps.get_release.outputs.tag_name }} does not exist, will create new release"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create new release with assets
      if: steps.check_release.outputs.exists == 'false'
      run: |
        # Ëé∑ÂèñOpenClash releaseÁöÑÊâÄÊúâassets
        ASSETS=$(curl -s "https://api.github.com/repos/vernesong/OpenClash/releases" | jq '.[0].assets')
        
        # Ê£ÄÊü•ÊòØÂê¶Êúâassets
        if [ "$ASSETS" = "null" ] || [ "$ASSETS" = "[]" ]; then
          echo "No assets found in the latest OpenClash release"
          exit 1
        fi
        
        echo "Found $(echo "$ASSETS" | jq 'length') assets to mirror"
        
        # Ëß£Á†Årelease body
        RELEASE_BODY_DECODED=$(echo "${{ steps.get_release.outputs.release_body_encoded }}" | base64 -d)
        
        # ÂàõÂª∫releaseÊèèËø∞ÔºåËΩ¨‰πâJSON‰∏≠ÁöÑÁâπÊÆäÂ≠óÁ¨¶
        RELEASE_DESCRIPTION="Mirror of OpenClash release ${{ steps.get_release.outputs.tag_name }}
        
        Original release: https://github.com/vernesong/OpenClash/releases/tag/${{ steps.get_release.outputs.tag_name }}
        
        ---
        
        $RELEASE_BODY_DECODED"
        
        # ‰ΩøÁî®jqÊù•Ê≠£Á°ÆÂ§ÑÁêÜJSONËΩ¨‰πâ
        RELEASE_DATA=$(jq -n \
          --arg tag "${{ steps.get_release.outputs.tag_name }}" \
          --arg name "OpenClash ${{ steps.get_release.outputs.tag_name }}" \
          --arg body "$RELEASE_DESCRIPTION" \
          '{
            "tag_name": $tag,
            "target_commitish": "main",
            "name": $name,
            "body": $body,
            "draft": false,
            "prerelease": true
          }')
        
        # ÂàõÂª∫release
        NEW_RELEASE=$(curl -s -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/releases" \
          -d "$RELEASE_DATA")
        
        # Ëé∑ÂèñÊñ∞ÂàõÂª∫ÁöÑrelease ID
        RELEASE_ID=$(echo "$NEW_RELEASE" | jq -r '.id')
        
        if [ "$RELEASE_ID" = "null" ] || [ -z "$RELEASE_ID" ]; then
          echo "Error: Failed to create release"
          echo "Response:"
          echo "$NEW_RELEASE" | jq '.'
          exit 1
        fi
        
        echo "Created release with ID: $RELEASE_ID"
        echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
        
        # ‰∏ãËΩΩÂπ∂‰∏ä‰º†ÊØè‰∏™asset
        UPLOAD_SUCCESS=0
        UPLOAD_FAILED=0
        
        echo "$ASSETS" | jq -c '.[]' | while read -r asset; do
          ASSET_NAME=$(echo "$asset" | jq -r '.name')
          ASSET_URL=$(echo "$asset" | jq -r '.browser_download_url')
          ASSET_SIZE=$(echo "$asset" | jq -r '.size')
          
          echo "Processing asset: $ASSET_NAME (Size: $ASSET_SIZE bytes)"
          
          # ‰∏ãËΩΩassetÂà∞‰∏¥Êó∂Êñá‰ª∂
          TEMP_FILE="/tmp/$ASSET_NAME"
          echo "Downloading $ASSET_URL to $TEMP_FILE"
          
          if curl -L -o "$TEMP_FILE" "$ASSET_URL"; then
            # È™åËØÅ‰∏ãËΩΩÁöÑÊñá‰ª∂Â§ßÂ∞è
            ACTUAL_SIZE=$(stat -c%s "$TEMP_FILE" 2>/dev/null || echo "0")
            if [ "$ACTUAL_SIZE" -eq "$ASSET_SIZE" ]; then
              echo "‚úì Successfully downloaded $ASSET_NAME ($ACTUAL_SIZE bytes)"
              
              # ‰∏ä‰º†assetÂà∞Êñ∞ÁöÑrelease
              echo "Uploading $ASSET_NAME to release..."
              UPLOAD_URL="https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$(echo "$ASSET_NAME" | sed 's/ /%20/g')"
              
              UPLOAD_RESPONSE=$(curl -s -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary "@$TEMP_FILE" \
                "$UPLOAD_URL")
              
              UPLOAD_ID=$(echo "$UPLOAD_RESPONSE" | jq -r '.id')
              
              if [ "$UPLOAD_ID" != "null" ] && [ -n "$UPLOAD_ID" ]; then
                echo "‚úì Successfully uploaded $ASSET_NAME (Upload ID: $UPLOAD_ID)"
                UPLOAD_SUCCESS=$((UPLOAD_SUCCESS + 1))
              else
                echo "‚úó Error uploading $ASSET_NAME:"
                echo "$UPLOAD_RESPONSE" | jq '.'
                UPLOAD_FAILED=$((UPLOAD_FAILED + 1))
              fi
            else
              echo "‚úó File size mismatch for $ASSET_NAME. Expected: $ASSET_SIZE, Actual: $ACTUAL_SIZE"
              UPLOAD_FAILED=$((UPLOAD_FAILED + 1))
            fi
            
            # Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
            rm -f "$TEMP_FILE"
          else
            echo "‚úó Error: Failed to download $ASSET_NAME from $ASSET_URL"
            UPLOAD_FAILED=$((UPLOAD_FAILED + 1))
          fi
        done
        
        echo "Release creation completed"
        echo "Assets uploaded successfully: $UPLOAD_SUCCESS"
        echo "Assets failed to upload: $UPLOAD_FAILED"
        
    - name: Skip if release exists
      if: steps.check_release.outputs.exists == 'true'
      run: |
        echo "Release ${{ steps.get_release.outputs.tag_name }} already exists in this repository"
        echo "Skipping release creation"
        
    - name: Summary
      run: |
        if [ "${{ steps.check_release.outputs.exists }}" = "true" ]; then
          echo "üìã Release Summary"
          echo "=================="
          echo "‚úì Release ${{ steps.get_release.outputs.tag_name }} already exists in this repository"
          echo "üìÖ Published: ${{ steps.get_release.outputs.published_at }}"
          echo "üîó View release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_release.outputs.tag_name }}"
          echo ""
          echo "‚ÑπÔ∏è  No action needed - release is up to date"
        else
          echo "üìã Release Summary"
          echo "=================="
          echo "‚úÖ Successfully mirrored OpenClash release ${{ steps.get_release.outputs.tag_name }}"
          echo "üìÖ Original published: ${{ steps.get_release.outputs.published_at }}"
          echo "üì¶ Release body length: ${{ steps.get_release.outputs.body_length }} characters"
          echo "üîó Original release: https://github.com/vernesong/OpenClash/releases/tag/${{ steps.get_release.outputs.tag_name }}"
          echo "üîó Mirrored release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_release.outputs.tag_name }}"
          echo ""
          echo "üéâ Mirror operation completed successfully!"
        fi
