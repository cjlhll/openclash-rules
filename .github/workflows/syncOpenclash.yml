name: Mirror OpenClash Release to Repository

on:
  # 手动触发
  workflow_dispatch:
  # 定时触发 - 每天检查一次
  schedule:
    - cron: '0 8 * * *'  # 每天早上8点UTC时间运行

jobs:
  mirror-openclash-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # 需要写权限来创建release
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        # 确保jq已安装
        sudo apt-get update
        sudo apt-get install -y jq curl
      
    - name: Get latest OpenClash release
      id: get_release
      run: |
        # 使用GitHub API获取最新的release信息（OpenClash只有pre-release版本）
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/vernesong/OpenClash/releases" | jq '.[0]')
        
        # 检查API响应是否有效
        if [ "$LATEST_RELEASE" = "null" ] || [ -z "$LATEST_RELEASE" ]; then
          echo "Error: Failed to get release information"
          exit 1
        fi
        
        # 提取release信息
        TAG_NAME=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
        RELEASE_NAME=$(echo "$LATEST_RELEASE" | jq -r '.name')
        PUBLISHED_AT=$(echo "$LATEST_RELEASE" | jq -r '.published_at')
        RELEASE_BODY=$(echo "$LATEST_RELEASE" | jq -r '.body')
        
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "published_at=$PUBLISHED_AT" >> $GITHUB_OUTPUT
        echo "release_body=$RELEASE_BODY" >> $GITHUB_OUTPUT
        
        echo "Latest Release: $RELEASE_NAME ($TAG_NAME)"
        echo "Published at: $PUBLISHED_AT"
        
    - name: Check if release already exists
      id: check_release
      run: |
        # 检查当前仓库是否已经有相同tag的release
        EXISTING_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get_release.outputs.tag_name }}" | jq -r '.tag_name')
        
        if [ "$EXISTING_RELEASE" = "${{ steps.get_release.outputs.tag_name }}" ]; then
          echo "Release ${{ steps.get_release.outputs.tag_name }} already exists in this repository"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Release ${{ steps.get_release.outputs.tag_name }} does not exist, will create new release"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create new release with assets
      if: steps.check_release.outputs.exists == 'false'
      run: |
        # 获取OpenClash release的所有assets
        ASSETS=$(curl -s "https://api.github.com/repos/vernesong/OpenClash/releases" | jq '.[0].assets')
        
        # 检查是否有assets
        if [ "$ASSETS" = "null" ] || [ "$ASSETS" = "[]" ]; then
          echo "No assets found in the latest OpenClash release"
          exit 1
        fi
        
        echo "Found $(echo "$ASSETS" | jq 'length') assets to mirror"
        
        # 创建新的release
        RELEASE_DATA=$(cat <<EOF
        {
          "tag_name": "${{ steps.get_release.outputs.tag_name }}",
          "target_commitish": "main",
          "name": "OpenClash ${{ steps.get_release.outputs.tag_name }}",
          "body": "Mirror of OpenClash release ${{ steps.get_release.outputs.tag_name }}\n\nOriginal release: https://github.com/vernesong/OpenClash/releases/tag/${{ steps.get_release.outputs.tag_name }}\n\n${{ steps.get_release.outputs.release_body }}",
          "draft": false,
          "prerelease": true
        }
        EOF
        )
        
        # 创建release
        NEW_RELEASE=$(curl -s -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/releases" \
          -d "$RELEASE_DATA")
        
        # 获取新创建的release ID
        RELEASE_ID=$(echo "$NEW_RELEASE" | jq -r '.id')
        
        if [ "$RELEASE_ID" = "null" ] || [ -z "$RELEASE_ID" ]; then
          echo "Error: Failed to create release"
          echo "$NEW_RELEASE" | jq '.'
          exit 1
        fi
        
        echo "Created release with ID: $RELEASE_ID"
        echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
        
        # 下载并上传每个asset
        echo "$ASSETS" | jq -c '.[]' | while read -r asset; do
          ASSET_NAME=$(echo "$asset" | jq -r '.name')
          ASSET_URL=$(echo "$asset" | jq -r '.browser_download_url')
          ASSET_SIZE=$(echo "$asset" | jq -r '.size')
          
          echo "Processing asset: $ASSET_NAME (Size: $ASSET_SIZE bytes)"
          
          # 下载asset到临时文件
          TEMP_FILE="/tmp/$ASSET_NAME"
          echo "Downloading $ASSET_URL to $TEMP_FILE"
          
          if curl -L -o "$TEMP_FILE" "$ASSET_URL"; then
            echo "Successfully downloaded $ASSET_NAME"
            
            # 上传asset到新的release
            echo "Uploading $ASSET_NAME to release..."
            UPLOAD_URL="https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$ASSET_NAME"
            
            UPLOAD_RESPONSE=$(curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$TEMP_FILE" \
              "$UPLOAD_URL")
            
            UPLOAD_ID=$(echo "$UPLOAD_RESPONSE" | jq -r '.id')
            
            if [ "$UPLOAD_ID" != "null" ] && [ -n "$UPLOAD_ID" ]; then
              echo "Successfully uploaded $ASSET_NAME (Upload ID: $UPLOAD_ID)"
            else
              echo "Error uploading $ASSET_NAME:"
              echo "$UPLOAD_RESPONSE" | jq '.'
            fi
            
            # 清理临时文件
            rm -f "$TEMP_FILE"
          else
            echo "Error: Failed to download $ASSET_NAME from $ASSET_URL"
          fi
        done
        
        echo "Release creation and asset upload completed"
        
    - name: Skip if release exists
      if: steps.check_release.outputs.exists == 'true'
      run: |
        echo "Release ${{ steps.get_release.outputs.tag_name }} already exists in this repository"
        echo "Skipping release creation"
        
    - name: Summary
      run: |
        if [ "${{ steps.check_release.outputs.exists }}" = "true" ]; then
          echo "✓ Release ${{ steps.get_release.outputs.tag_name }} already exists in this repository"
          echo "No action needed"
        else
          echo "✓ Successfully mirrored OpenClash release ${{ steps.get_release.outputs.tag_name }}"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_release.outputs.tag_name }}"
          echo "Original release: https://github.com/vernesong/OpenClash/releases/tag/${{ steps.get_release.outputs.tag_name }}"
        fi
