---
name: Mirror OpenClash Release to Repository

on:
  # ÊâãÂä®Ëß¶Âèë
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Âº∫Âà∂Êõ¥Êñ∞Â∑≤Â≠òÂú®ÁöÑrelease'
        required: false
        default: 'false'
        type: boolean
  # ÂÆöÊó∂Ëß¶Âèë - ÊØèÂ§©Ê£ÄÊü•‰∏ÄÊ¨°
  schedule:
    - cron: '0 2 * * *'  # ÊØèÂ§©ÂáåÊô®2ÁÇπÊâßË°å

jobs:
  mirror-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          # Á°Æ‰øùÂøÖË¶ÅÂ∑•ÂÖ∑Â∑≤ÂÆâË£Ö
          sudo apt-get update
          sudo apt-get install -y jq curl wget parallel
        
      - name: Get latest OpenClash release
        id: get_release
        run: |
          echo "üîç Ê≠£Âú®Ëé∑ÂèñOpenClashÊúÄÊñ∞ÂèëÂ∏É‰ø°ÊÅØ..."
          
          # ‰ΩøÁî®GitHub APIËé∑ÂèñÊúÄÊñ∞ÁöÑrelease‰ø°ÊÅØÔºàÂåÖÊã¨pre-releaseÁâàÊú¨Ôºâ
          LATEST_RELEASE=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/vernesong/OpenClash/releases?per_page=1" | jq '.[0]')
          
          # Ê£ÄÊü•APIÂìçÂ∫îÊòØÂê¶ÊúâÊïà
          if [ "$LATEST_RELEASE" = "null" ] || [ -z "$LATEST_RELEASE" ]; then
            echo "‚ùå ÈîôËØØ: Êó†Ê≥ïËé∑ÂèñÂèëÂ∏É‰ø°ÊÅØ"
            exit 1
          fi
          
          # Ê£ÄÊü•ÊòØÂê¶‰∏∫pre-release
          IS_PRERELEASE=$(echo "$LATEST_RELEASE" | jq -r '.prerelease')
          echo "üì¶ ÂèëÁé∞ÂèëÂ∏ÉÁâàÊú¨ - È¢ÑÂèëÂ∏ÉÁâàÊú¨: $IS_PRERELEASE"
          
          # ÊèêÂèñrelease‰ø°ÊÅØ
          TAG_NAME=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
          RELEASE_NAME=$(echo "$LATEST_RELEASE" | jq -r '.name')
          PUBLISHED_AT=$(echo "$LATEST_RELEASE" | jq -r '.published_at')
          ASSETS_COUNT=$(echo "$LATEST_RELEASE" | jq '.assets | length')
          
          # Â§ÑÁêÜrelease bodyÔºåËΩ¨‰πâÁâπÊÆäÂ≠óÁ¨¶ÂíåÊç¢Ë°åÁ¨¶
          RELEASE_BODY_RAW=$(echo "$LATEST_RELEASE" | jq -r '.body')
          # ‰ΩøÁî®base64ÁºñÁ†ÅÊù•ÂÆâÂÖ®‰º†ÈÄíÂåÖÂê´ÁâπÊÆäÂ≠óÁ¨¶ÁöÑÂÜÖÂÆπ
          RELEASE_BODY_ENCODED=$(echo "$RELEASE_BODY_RAW" | base64 -w 0)
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "published_at=$PUBLISHED_AT" >> $GITHUB_OUTPUT
          echo "release_body_encoded=$RELEASE_BODY_ENCODED" >> $GITHUB_OUTPUT
          echo "assets_count=$ASSETS_COUNT" >> $GITHUB_OUTPUT
          
          echo "‚úÖ ÊúÄÊñ∞ÂèëÂ∏É: $RELEASE_NAME ($TAG_NAME)"
          echo "üìÖ ÂèëÂ∏ÉÊó∂Èó¥: $PUBLISHED_AT"
          echo "üìÅ ËµÑÊ∫êÊñá‰ª∂Êï∞Èáè: $ASSETS_COUNT"
          echo "üìù ÊèèËø∞ÈïøÂ∫¶: ${#RELEASE_BODY_RAW} Â≠óÁ¨¶"
          
      - name: Check if release already exists
        id: check_release
        run: |
          echo "üîç Ê£ÄÊü•ÂèëÂ∏ÉÁâàÊú¨ÊòØÂê¶Â∑≤Â≠òÂú®..."
          
          # Ëé∑ÂèñÂΩìÂâç‰ªìÂ∫ìÁöÑÊâÄÊúâreleases
          EXISTING_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get_release.outputs.tag_name }}")
          
          # Ê£ÄÊü•ÊòØÂê¶Â≠òÂú®
          if echo "$EXISTING_RELEASE" | jq -e '.id' > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "release_id=$(echo "$EXISTING_RELEASE" | jq -r '.id')" >> $GITHUB_OUTPUT
            echo "üìã ÂèëÂ∏ÉÁâàÊú¨ ${{ steps.get_release.outputs.tag_name }} Â∑≤Â≠òÂú®"
            echo "üÜî ÂèëÂ∏ÉID: $(echo "$EXISTING_RELEASE" | jq -r '.id')"
            
            # Ê£ÄÊü•ÊòØÂê¶Âº∫Âà∂Êõ¥Êñ∞
            FORCE_UPDATE="${{ github.event.inputs.force_update }}"
            if [ "$FORCE_UPDATE" = "true" ]; then
              echo "force_update=true" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è  Âº∫Âà∂Êõ¥Êñ∞Ê®°ÂºèÂ∑≤ÂêØÁî®ÔºåÂ∞ÜÂà†Èô§Áé∞ÊúâÂèëÂ∏É"
            else
              echo "force_update=false" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è  Ë∑≥ËøáÊõ¥Êñ∞ - Â¶ÇÈúÄÂº∫Âà∂Êõ¥Êñ∞ÔºåËØ∑Âú®ÊâãÂä®Ëß¶ÂèëÊó∂ÂêØÁî® force_update ÈÄâÈ°π"
            fi
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "force_update=false" >> $GITHUB_OUTPUT
            echo "‚úÖ ÂèëÂ∏ÉÁâàÊú¨ ${{ steps.get_release.outputs.tag_name }} ‰∏çÂ≠òÂú®ÔºåÂ∞ÜÂàõÂª∫Êñ∞ÂèëÂ∏É"
          fi
          
      - name: Delete existing release if force update
        if: steps.check_release.outputs.exists == 'true' && steps.check_release.outputs.force_update == 'true'
        run: |
          echo "üóëÔ∏è  Ê≠£Âú®Âà†Èô§Áé∞ÊúâÂèëÂ∏É..."
          
          # Âà†Èô§Áé∞ÊúâÁöÑrelease
          curl -X DELETE \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.release_id }}"
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Áé∞ÊúâÂèëÂ∏ÉÂ∑≤Âà†Èô§"
          else
            echo "‚ùå Âà†Èô§Áé∞ÊúâÂèëÂ∏ÉÂ§±Ë¥•"
            exit 1
          fi
          
          # Âà†Èô§ÂØπÂ∫îÁöÑtag
          echo "üè∑Ô∏è  Ê≠£Âú®Âà†Èô§Áé∞ÊúâÊ†áÁ≠æ..."
          curl -X DELETE \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{ steps.get_release.outputs.tag_name }}"
          
          echo "‚úÖ Áé∞ÊúâÊ†áÁ≠æÂ∑≤Âà†Èô§ÔºåÂáÜÂ§áÂàõÂª∫Êñ∞ÂèëÂ∏É"
          
      - name: Create new release with assets
        if: steps.check_release.outputs.exists == 'false' || steps.check_release.outputs.force_update == 'true'
        run: |
          echo "üöÄ Ê≠£Âú®ÂàõÂª∫Êñ∞ÁöÑÂèëÂ∏ÉÁâàÊú¨..."
          
          # Ëß£Á†Årelease body
          RELEASE_BODY=$(echo "${{ steps.get_release.outputs.release_body_encoded }}" | base64 -d)
          
          # ÂàõÂª∫release
          RELEASE_RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases" \
            -d "{
              \"tag_name\": \"${{ steps.get_release.outputs.tag_name }}\",
              \"name\": \"${{ steps.get_release.outputs.release_name }}\",
              \"body\": $(echo "$RELEASE_BODY" | jq -R -s .),
              \"draft\": false,
              \"prerelease\": false
            }")
          
          # Ê£ÄÊü•ÂàõÂª∫ÊòØÂê¶ÊàêÂäü
          RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
          if [ "$RELEASE_ID" = "null" ] || [ -z "$RELEASE_ID" ]; then
            echo "‚ùå ÂàõÂª∫ÂèëÂ∏ÉÂ§±Ë¥•"
            echo "$RELEASE_RESPONSE" | jq .
            exit 1
          fi
          
          echo "‚úÖ ÂèëÂ∏ÉÂàõÂª∫ÊàêÂäüÔºåID: $RELEASE_ID"
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          
          # Ëé∑ÂèñÂèëÂ∏É‰ø°ÊÅØÔºàÂè™Ëé∑Âèñ.ipkÂíå.apkÊñá‰ª∂Ôºâ
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/vernesong/OpenClash/releases/tags/${{ steps.get_release.outputs.tag_name }}")
          
          # Ëé∑ÂèñÊâÄÊúâ.ipkÂíå.apkÊñá‰ª∂
          ASSETS=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | test("\\.(ipk|apk)$")) | "\(.name)|\(.browser_download_url)"')
          
          # ÂàõÂª∫‰∏¥Êó∂ÁõÆÂΩïÂíåassetsÁõÆÂΩï
          mkdir -p /tmp/openclash_assets
          mkdir -p assets
          cd /tmp/openclash_assets
          
          # ‰∏ãËΩΩ.ipkÂíå.apkÊñá‰ª∂
          if [ -n "$ASSETS" ] && [ "$ASSETS" != "null" ]; then
            ASSET_COUNT=$(echo "$ASSETS" | wc -l)
            echo "üì¶ ÊâæÂà∞ $ASSET_COUNT ‰∏™.ipk/.apkÊñá‰ª∂"
            
            # Âπ∂Ë°å‰∏ãËΩΩÊâÄÊúâÊñá‰ª∂
            echo "$ASSETS" | while IFS='|' read -r asset_name download_url; do
              echo "‚¨áÔ∏è  ‰∏ãËΩΩ: $asset_name"
              wget -q --timeout=30 --tries=3 "$download_url" -O "$asset_name" &
            done
            
            # Á≠âÂæÖÊâÄÊúâ‰∏ãËΩΩÂÆåÊàê
            wait
            
            # È™åËØÅ‰∏ãËΩΩÁöÑÊñá‰ª∂
            echo "üîç È™åËØÅ‰∏ãËΩΩÁöÑÊñá‰ª∂..."
            for file in *.ipk *.apk; do
              if [ -f "$file" ]; then
                FILE_SIZE=$(stat -c%s "$file" 2>/dev/null || echo "0")
                if [ "$FILE_SIZE" -gt 1000 ]; then
                  echo "‚úÖ $file (${FILE_SIZE} bytes)"
                else
                  echo "‚ùå $file ‰∏ãËΩΩÂ§±Ë¥•ÊàñÊñá‰ª∂ÊçüÂùè"
                  exit 1
                fi
              fi
            done
            
            # Â§çÂà∂ÂéüÂßãÊñá‰ª∂Âà∞assetsÁõÆÂΩïÔºà‰øùÊåÅÂéüÂßãÊñá‰ª∂ÂêçÔºâ
            echo "üìÅ Â§çÂà∂Êñá‰ª∂Âà∞assetsÁõÆÂΩï..."
            for file in *.ipk *.apk; do
              if [ -f "$file" ]; then
                cp "$file" "../assets/"
                echo "üìã Â§çÂà∂: $file -> assets/"
              fi
            done
            
            # ÈáçÂëΩÂêçÊñá‰ª∂Áî®‰∫érelease‰∏ä‰º†ÔºàÂéªÊéâÁâàÊú¨ÂêéÁºÄÔºâ
            echo "üîÑ ÈáçÂëΩÂêçÊñá‰ª∂Áî®‰∫érelease‰∏ä‰º†..."
            for file in *.ipk *.apk; do
              if [ -f "$file" ]; then
                # ÊèêÂèñÂü∫Á°ÄÊñá‰ª∂ÂêçÔºàÂéªÊéâÁâàÊú¨Âè∑Ôºâ
                if [[ "$file" == *".ipk" ]]; then
                  NEW_NAME="luci-app-openclash.ipk"
                elif [[ "$file" == *".apk" ]]; then
                  NEW_NAME="luci-app-openclash.apk"
                fi
                
                if [ "$file" != "$NEW_NAME" ]; then
                  echo "üìù ÈáçÂëΩÂêç: $file -> $NEW_NAME"
                  cp "$file" "$NEW_NAME"
                else
                  echo "‚úÖ Êñá‰ª∂ÂêçÂ∑≤Ê≠£Á°Æ: $file"
                fi
              fi
            done
          else
            echo "‚ö†Ô∏è  Êú™ÊâæÂà∞.ipk/.apkÊñá‰ª∂"
            exit 1
          fi
          
          # ÁªüËÆ°Â§ÑÁêÜÂêéÁöÑÊñá‰ª∂
          TOTAL_FILES=$(ls -1 | wc -l)
          echo "üìÅ Â§ÑÁêÜÂÆåÊàêÔºåÂÖ± $TOTAL_FILES ‰∏™Êñá‰ª∂"
          
          # ‰∏ä‰º†ÈáçÂëΩÂêçÂêéÁöÑÊñá‰ª∂Âà∞Êñ∞ÂèëÂ∏É
          UPLOAD_SUCCESS=0
          UPLOAD_FAILED=0
          
          for file in *; do
            if [ -f "$file" ]; then
              echo "‚¨ÜÔ∏è  ‰∏ä‰º†: $file"
              
              # Â∞ùËØï‰∏ä‰º†Êñá‰ª∂ÔºåÊúÄÂ§öÈáçËØï3Ê¨°
              RETRY_COUNT=0
              UPLOAD_RESULT=1
              
              while [ $RETRY_COUNT -lt 3 ] && [ $UPLOAD_RESULT -ne 0 ]; do
                if [ $RETRY_COUNT -gt 0 ]; then
                  echo "üîÑ ÈáçËØï‰∏ä‰º† ($((RETRY_COUNT + 1))/3): $file"
                  sleep 2
                fi
                
                UPLOAD_RESPONSE=$(curl -s -w "%{http_code}" -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"$file" \
                  "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$file")
                
                HTTP_CODE="${UPLOAD_RESPONSE: -3}"
                UPLOAD_RESULT=$?
                
                if [ "$HTTP_CODE" = "201" ] && [ $UPLOAD_RESULT -eq 0 ]; then
                  echo "‚úÖ $file ‰∏ä‰º†ÊàêÂäü (HTTP: $HTTP_CODE)"
                  UPLOAD_SUCCESS=$((UPLOAD_SUCCESS + 1))
                  break
                else
                  echo "‚ö†Ô∏è  ‰∏ä‰º†Â§±Ë¥• (HTTP: $HTTP_CODE, Exit: $UPLOAD_RESULT)"
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                fi
              done
              
              if [ $UPLOAD_RESULT -ne 0 ] || [ "$HTTP_CODE" != "201" ]; then
                echo "‚ùå $file ‰∏ä‰º†ÊúÄÁªàÂ§±Ë¥•"
                UPLOAD_FAILED=$((UPLOAD_FAILED + 1))
              fi
            fi
          done
          
          echo "üìä ‰∏ä‰º†ÁªüËÆ°: ÊàêÂäü $UPLOAD_SUCCESS ‰∏™ÔºåÂ§±Ë¥• $UPLOAD_FAILED ‰∏™"
          
          if [ $UPLOAD_FAILED -gt 0 ]; then
            echo "‚ö†Ô∏è  ÈÉ®ÂàÜÊñá‰ª∂‰∏ä‰º†Â§±Ë¥•Ôºå‰ΩÜÂèëÂ∏ÉÂ∑≤ÂàõÂª∫"
            exit 0  # ‰∏ç‰∏≠Êñ≠Â∑•‰ΩúÊµÅÔºåÂÖÅËÆ∏ÁªßÁª≠ÊâßË°å
          fi
          
          # Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
          cd /
          rm -rf /tmp/openclash_assets
          
          # Êèê‰∫§assetsÁõÆÂΩïÁöÑÊõ¥ÊîπÂà∞‰ªìÂ∫ì
          cd "$GITHUB_WORKSPACE"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Ê£ÄÊü•ÊòØÂê¶ÊúâÊñ∞Êñá‰ª∂ÈúÄË¶ÅÊèê‰∫§
          if [ -n "$(git status --porcelain assets/)" ]; then
            git add assets/
            git commit -m "Auto-update OpenClash assets to ${{ steps.get_release.outputs.tag_name }} - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push
            echo "‚úÖ AssetsÁõÆÂΩïÂ∑≤Êõ¥Êñ∞Âπ∂Êé®ÈÄÅÂà∞‰ªìÂ∫ì"
          else
            echo "‚ÑπÔ∏è  AssetsÁõÆÂΩïÊó†ÂèòÂåñÔºåË∑≥ËøáÊèê‰∫§"
          fi
          
          echo "üéâ ÂèëÂ∏ÉÂàõÂª∫ÂÆåÊàêÔºÅ"
          
      - name: Skip if release exists
        if: steps.check_release.outputs.exists == 'true' && steps.check_release.outputs.force_update == 'false'
        run: |
          echo "‚è≠Ô∏è  Ë∑≥ËøáÂèëÂ∏ÉÂàõÂª∫ - ÁâàÊú¨ ${{ steps.get_release.outputs.tag_name }} Â∑≤Â≠òÂú®"
          
      - name: Summary
        run: |
          echo "üìä === ÊâßË°åÊëòË¶Å ==="
          echo "üè∑Ô∏è  ÁâàÊú¨Ê†áÁ≠æ: ${{ steps.get_release.outputs.tag_name }}"
          echo "üìÖ ÂèëÂ∏ÉÊó∂Èó¥: ${{ steps.get_release.outputs.published_at }}"
          echo "üìÅ ÂêåÊ≠•ÁöÑËµÑÊ∫êÊñá‰ª∂: IPKÂíåAPKÊñá‰ª∂"
          
          if [ "${{ steps.check_release.outputs.exists }}" = "true" ] && [ "${{ steps.check_release.outputs.force_update }}" = "false" ]; then
            echo "‚ÑπÔ∏è  Áä∂ÊÄÅ: ÂèëÂ∏ÉÂ∑≤Â≠òÂú®ÔºåÊú™ËøõË°åÊõ¥Êñ∞"
            echo "üí° ÊèêÁ§∫: Â¶ÇÈúÄÂº∫Âà∂Êõ¥Êñ∞ÔºåËØ∑Âú®ÊâãÂä®Ëß¶ÂèëÊó∂ÂêØÁî® force_update ÈÄâÈ°π"
          elif [ "${{ steps.check_release.outputs.force_update }}" = "true" ]; then
            echo "üîÑ Áä∂ÊÄÅ: Âº∫Âà∂Êõ¥Êñ∞ÂÆåÊàê - Â∑≤ÂêåÊ≠•ÊâÄÊúâ.ipk/.apkÊñá‰ª∂"
            echo "üîó Êü•ÁúãÂèëÂ∏É: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_release.outputs.tag_name }}"
          else
            echo "üÜï Áä∂ÊÄÅ: Êñ∞ÂèëÂ∏ÉÂàõÂª∫ÂÆåÊàê - Â∑≤ÂêåÊ≠•ÊâÄÊúâ.ipk/.apkÊñá‰ª∂"
            echo "üîó Êü•ÁúãÂèëÂ∏É: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_release.outputs.tag_name }}"
          fi
          
          echo "üì¶ ÂéüÂßãÂèëÂ∏É: https://github.com/vernesong/OpenClash/releases/tag/${{ steps.get_release.outputs.tag_name }}"
          echo "üìã ÂêåÊ≠•ÂÜÖÂÆπ:"
          echo "  ‚úÖ ÊâÄÊúâ.ipkÊñá‰ª∂ÔºàÂéüÂßãÊñá‰ª∂Âêç‰øùÂ≠òÂú®assets/ÁõÆÂΩïÔºâ"
          echo "  ‚úÖ ÊâÄÊúâ.apkÊñá‰ª∂ÔºàÂéüÂßãÊñá‰ª∂Âêç‰øùÂ≠òÂú®assets/ÁõÆÂΩïÔºâ"
          echo "  ‚úÖ luci-app-openclash.ipk (release‰∏≠ÂéªÊéâÁâàÊú¨ÂêéÁºÄ)"
          echo "  ‚úÖ luci-app-openclash.apk (release‰∏≠ÂéªÊéâÁâàÊú¨ÂêéÁºÄ)"
          echo "  üìä ÂÆåÊï¥ÂêåÊ≠•ÊâÄÊúâÁºñËØë‰∫ßÁâ©Êñá‰ª∂"

