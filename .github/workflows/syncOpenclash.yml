name: Sync OpenClash Releases

on:
  schedule:
    # 每天UTC时间02:00运行 (北京时间10:00)
    - cron: '0 2 * * *'
  workflow_dispatch:
    # 允许手动触发
  push:
    branches: [ main ]

jobs:
  sync-openclash:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y wget curl jq
        mkdir -p assets temp
        
    - name: Get Latest OpenClash Release
      id: get_release
      run: |
        echo "获取OpenClash最新release信息..."
        RELEASE_INFO=$(curl -s "https://api.github.com/repos/vernesong/OpenClash/releases/latest")
        
        if [ $? -ne 0 ] || [ -z "$RELEASE_INFO" ]; then
          echo "获取release信息失败，尝试获取所有releases的第一个..."
          RELEASE_INFO=$(curl -s "https://api.github.com/repos/vernesong/OpenClash/releases?per_page=1" | jq '.[0]')
        fi
        
        TAG_NAME=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
        RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name')
        RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body')
        PUBLISHED_AT=$(echo "$RELEASE_INFO" | jq -r '.published_at')
        
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "published_at=$PUBLISHED_AT" >> $GITHUB_OUTPUT
        
        # 保存release body到文件
        echo "$RELEASE_BODY" > temp/release_body.txt
        
        echo "找到OpenClash版本: $TAG_NAME"
        echo "发布时间: $PUBLISHED_AT"
        
        # 获取assets信息
        echo "$RELEASE_INFO" | jq -r '.assets[] | "\(.name)|\(.browser_download_url)|\(.size)"' > temp/assets_list.txt
        
        echo "Assets列表:"
        cat temp/assets_list.txt
    
    - name: Check Existing Release
      id: check_existing
      run: |
        TAG_NAME="${{ steps.get_release.outputs.tag_name }}"
        
        # 检查是否已存在相同版本的release
        EXISTING_RELEASE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | jq -r '.tag_name // empty')
        
        if [ "$EXISTING_RELEASE" = "$TAG_NAME" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release $TAG_NAME 已存在，将更新assets"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release $TAG_NAME 不存在，将创建新release"
        fi
    
    - name: Download Assets
      run: |
        echo "开始下载assets文件..."
        
        while IFS='|' read -r name url size; do
          if [[ "$name" == *.ipk ]] || [[ "$name" == *.apk ]]; then
            echo "下载: $name (大小: $size bytes)"
            
            # 使用wget下载，设置重试和超时
            if wget --timeout=30 --tries=3 --continue "$url" -O "temp/$name"; then
              # 验证文件大小
              DOWNLOADED_SIZE=$(stat -c%s "temp/$name")
              if [ "$DOWNLOADED_SIZE" -eq "$size" ]; then
                echo "✓ $name 下载成功并验证完整性"
                # 复制到assets目录保持原始文件名
                cp "temp/$name" "assets/$name"
              else
                echo "✗ $name 文件大小不匹配 (期望: $size, 实际: $DOWNLOADED_SIZE)"
                exit 1
              fi
            else
              echo "✗ $name 下载失败"
              exit 1
            fi
          else
            echo "跳过非IPK/APK文件: $name"
          fi
        done < temp/assets_list.txt
        
        echo "所有文件下载完成"
        ls -la assets/
    
    - name: Commit Assets to Repository
      run: |
        # 配置git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 检查assets目录是否有变化
        if [ -n "$(git status --porcelain assets/)" ]; then
          git add assets/
          git commit -m "Update OpenClash assets for ${{ steps.get_release.outputs.tag_name }}
          
          - 同步时间: $(date '+%Y-%m-%d %H:%M:%S UTC')
          - 源版本: ${{ steps.get_release.outputs.tag_name }}
          - 包含文件: $(ls assets/ | tr '\n' ' ')
          "
          git push
          echo "Assets已提交到仓库"
        else
          echo "Assets目录无变化，跳过提交"
        fi
    
    - name: Create or Update Release
      uses: actions/create-release@v1
      if: steps.check_existing.outputs.exists == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_release.outputs.tag_name }}
        release_name: "OpenClash ${{ steps.get_release.outputs.tag_name }}"
        body: |
          # OpenClash ${{ steps.get_release.outputs.tag_name }} 同步版本
          
          **同步时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          **源仓库**: [vernesong/OpenClash](https://github.com/vernesong/OpenClash)
          **源发布时间**: ${{ steps.get_release.outputs.published_at }}
          
          ## 包含的编译产物文件
          
          本release包含以下从OpenClash官方仓库同步的编译产物：
          
          ### IPK文件 (OpenWrt包管理器格式)
          - 适用于OpenWrt系统的安装包
          - 文件保存在 `assets/` 目录中
          
          ### APK文件 (Alpine包管理器格式)  
          - 适用于Alpine Linux系统的安装包
          - 文件保存在 `assets/` 目录中
          
          ## 安装说明
          
          请根据您的系统类型选择对应的文件：
          
          **OpenWrt系统**:
          ```bash
          # 下载IPK文件后安装
          opkg install /path/to/luci-app-openclash_*.ipk
          ```
          
          **Alpine Linux系统**:
          ```bash
          # 下载APK文件后安装  
          apk add --allow-untrusted /path/to/luci-app-openclash-*.apk
          ```
          
          ## 原始发布说明
          
          以下是来自OpenClash官方仓库的发布说明：
          
          ---
          
          $(cat temp/release_body.txt)
          
        draft: false
        prerelease: false
    
    - name: Upload Assets to Release
      run: |
        TAG_NAME="${{ steps.get_release.outputs.tag_name }}"
        
        # 获取release ID
        RELEASE_ID=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | jq -r '.id')
        
        if [ "$RELEASE_ID" != "null" ] && [ -n "$RELEASE_ID" ]; then
          echo "找到release ID: $RELEASE_ID"
          
          # 上传每个asset文件
          for file in assets/*.{ipk,apk}; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "上传 $filename 到release..."
              
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$filename"
              
              echo "✓ $filename 上传完成"
            fi
          done
        else
          echo "无法获取release ID"
          exit 1
        fi
    
    - name: Cleanup
      run: |
        rm -rf temp/
        echo "清理完成"
    
    - name: Summary
      run: |
        echo "## 🎉 OpenClash同步完成!"
        echo ""
        echo "**版本**: ${{ steps.get_release.outputs.tag_name }}"
        echo "**同步时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')"
        echo "**同步的文件**:"
        for file in assets/*; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            size=$(stat -c%s "$file")
            echo "- $filename ($(numfmt --to=iec-i --suffix=B $size))"
          fi
        done
        echo ""
        echo "所有IPK和APK文件已成功同步到仓库!"
