name: 同步 OpenClash Releases

on:
  # 手动触发
  workflow_dispatch:
  # 定时触发（每天凌晨2点）
  schedule:
    - cron: '0 2 * * *'
  # 推送代码时触发
  push:
    branches: [ main, master ]

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 安装依赖
      run: |
        npm install -g @octokit/rest

    - name: 获取 OpenClash 最新 Release 信息
      id: get-release
      run: |
        # 获取最新release信息（使用第一个release，因为该仓库没有latest标记）
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/vernesong/OpenClash/releases | jq '.[0]')
        echo "latest_release<<EOF" >> $GITHUB_OUTPUT
        echo "$LATEST_RELEASE" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # 提取tag名称
        TAG_NAME=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        
        # 提取release名称
        RELEASE_NAME=$(echo "$LATEST_RELEASE" | jq -r '.name')
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        
        # 提取release描述
        RELEASE_BODY=$(echo "$LATEST_RELEASE" | jq -r '.body')
        echo "release_body<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "获取到最新release: $TAG_NAME - $RELEASE_NAME"

    - name: 删除已存在的Release（如果存在）
      id: delete-existing
      run: |
        # 检查当前仓库是否已存在相同tag的release
        EXISTING_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get-release.outputs.tag_name }}" || echo "null")
        
        if [ "$EXISTING_RELEASE" != "null" ]; then
          echo "发现已存在的release: ${{ steps.get-release.outputs.tag_name }}，准备删除..."
          
          # 获取release ID
          RELEASE_ID=$(echo "$EXISTING_RELEASE" | jq -r '.id')
          
          # 删除已存在的release
          curl -s -X DELETE \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          
          echo "✅ 已删除旧版本release: ${{ steps.get-release.outputs.tag_name }}"
          echo "deleted=true" >> $GITHUB_OUTPUT
        else
          echo "不存在相同版本的release，直接创建新release"
          echo "deleted=false" >> $GITHUB_OUTPUT
        fi

    - name: 下载 OpenClash Assets
      run: |
        # 创建下载目录
        mkdir -p downloads
        
        # 获取assets列表并下载
        echo "${{ steps.get-release.outputs.latest_release }}" | jq -r '.assets[] | .browser_download_url' | while read url; do
          if [ -n "$url" ]; then
            filename=$(basename "$url")
            echo "正在下载: $filename"
            curl -L -o "downloads/$filename" "$url"
            echo "下载完成: $filename"
          fi
        done
        
        # 列出下载的文件
        echo "已下载的文件："
        ls -la downloads/

    - name: 创建 Release
      run: |
        # 创建release
        RELEASE_DATA=$(cat <<EOF
        {
          "tag_name": "${{ steps.get-release.outputs.tag_name }}",
          "name": "${{ steps.get-release.outputs.release_name }}",
          "body": "自动同步自 [OpenClash](https://github.com/vernesong/OpenClash) ${{ steps.get-release.outputs.tag_name }}\n\n${{ steps.get-release.outputs.release_body }}",
          "draft": false,
          "prerelease": false
        }
        EOF
        )
        
        # 创建release
        RELEASE_RESPONSE=$(curl -s -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d "$RELEASE_DATA" \
          "https://api.github.com/repos/${{ github.repository }}/releases")
        
        # 获取release的upload_url
        UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')
        echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV
        
        echo "Release创建成功: ${{ steps.get-release.outputs.tag_name }}"

    - name: 上传 Assets
      run: |
        # 上传所有下载的文件
        for file in downloads/*; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "正在上传: $filename"
            
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "$UPLOAD_URL?name=$filename"
            
            echo "上传完成: $filename"
          fi
        done

    - name: 清理临时文件
      if: always()
      run: |
        rm -rf downloads/

    - name: 输出结果
      run: |
        if [ "${{ steps.delete-existing.outputs.deleted }}" == "true" ]; then
          echo "✅ 已覆盖旧版本并成功同步OpenClash release: ${{ steps.get-release.outputs.tag_name }}"
        else
          echo "✅ 成功同步OpenClash release: ${{ steps.get-release.outputs.tag_name }}"
        fi
